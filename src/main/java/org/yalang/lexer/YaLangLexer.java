/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.yalang.lexer;

import com.intellij.psi.tree.IElementType;
import org.yalang.YaLangTokenTypes;
import org.yalang.lexer.YaLangLexerFStringHelper;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>YaLang.flex</tt>
 */
class YaLangLexer implements FlexLexerEx {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\1\33\1\34\1\35\1\13\1\36\6\13\1\37\1\40\1\41\1\1\3\13\1\42\6\13\1\16\1\43"+
    "\2\13\1\44\2\13\1\45\1\1\1\13\1\46\4\1\1\13\1\47\1\1\1\50\1\22\7\13\1\51\1"+
    "\24\1\37\1\52\1\40\1\53\1\54\1\55\1\51\1\16\1\56\1\52\1\40\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\22\1\40\1\65\1\66\1\67\1\51\1\70\1\71\1\52\1\40\1\65\1\72"+
    "\1\73\1\51\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\62\1\1\1\103\1\104\1\40"+
    "\1\105\1\106\1\107\1\51\1\1\1\103\1\104\1\40\1\110\1\106\1\111\1\51\1\112"+
    "\1\113\1\104\1\13\1\42\1\114\1\115\1\51\1\116\1\117\1\120\1\13\1\121\1\122"+
    "\1\123\1\62\1\124\1\24\2\13\1\31\1\125\1\126\2\1\1\127\1\130\1\131\1\132\1"+
    "\133\1\134\2\1\1\67\1\135\1\126\1\136\1\137\1\13\1\140\1\24\1\141\1\137\1"+
    "\13\1\140\1\142\3\1\4\13\1\126\4\13\1\143\2\13\1\144\2\13\1\145\24\13\1\146"+
    "\1\147\2\13\1\146\2\13\1\150\1\151\1\14\3\13\1\151\3\13\1\42\2\1\1\13\1\1"+
    "\5\13\1\152\1\24\45\13\1\153\1\13\1\24\1\31\4\13\1\154\1\155\1\156\1\157\1"+
    "\13\1\157\1\13\1\160\1\156\1\161\5\13\1\162\1\126\1\1\1\163\1\126\5\13\1\26"+
    "\2\13\1\31\4\13\1\63\1\13\1\125\2\46\1\62\1\13\1\45\1\157\2\13\1\46\1\13\1"+
    "\164\1\126\2\1\1\13\1\46\3\13\1\125\1\13\1\153\2\126\1\165\1\125\4\1\4\13"+
    "\1\46\1\126\1\166\1\160\3\13\1\43\3\13\1\160\3\13\1\26\1\167\1\43\1\13\1\45"+
    "\1\155\4\1\1\170\1\13\1\171\17\13\1\172\21\13\1\152\2\13\1\152\1\173\1\13"+
    "\1\45\3\13\1\174\1\175\1\176\1\140\1\175\2\1\1\177\1\200\1\67\1\201\1\1\1"+
    "\202\1\1\1\140\3\1\2\13\1\67\1\203\1\204\1\205\1\206\1\207\1\1\2\13\1\155"+
    "\62\1\1\210\2\13\1\164\161\1\2\13\1\125\2\13\1\125\10\13\1\211\1\160\2\13"+
    "\1\144\3\13\1\212\1\200\1\13\1\213\4\214\2\13\2\1\1\200\35\1\1\215\1\1\1\24"+
    "\1\216\1\24\4\13\1\217\1\24\4\13\1\145\1\220\1\13\1\45\1\24\4\13\1\125\1\1"+
    "\1\13\1\31\3\1\1\13\40\1\133\13\1\63\4\1\135\13\1\63\2\1\10\13\1\140\4\1\2"+
    "\13\1\45\20\13\1\140\1\13\1\221\1\1\3\13\1\222\7\13\1\16\1\1\1\223\1\224\5"+
    "\13\1\225\1\13\1\125\1\26\3\1\1\223\2\13\1\26\1\1\3\13\1\160\4\13\1\63\1\126"+
    "\1\13\1\226\1\43\1\13\1\45\2\13\1\160\1\13\1\140\4\13\1\227\1\126\1\13\1\230"+
    "\3\13\1\213\1\45\1\126\1\13\1\120\4\13\1\32\1\163\1\13\1\231\1\232\1\233\1"+
    "\214\2\13\1\145\1\63\7\13\1\234\1\126\72\13\1\160\1\13\1\235\2\13\1\46\20"+
    "\1\26\13\1\45\6\13\1\164\2\1\1\213\1\236\1\40\1\237\1\240\6\13\1\16\1\1\1"+
    "\241\25\13\1\45\1\1\4\13\1\224\2\13\1\26\2\1\1\46\1\13\1\1\1\13\1\242\1\243"+
    "\2\1\1\141\7\13\1\140\1\1\1\126\1\24\1\244\1\24\1\31\1\210\4\13\1\125\1\245"+
    "\1\246\2\1\1\247\1\13\1\14\1\250\2\45\2\1\7\13\1\31\4\1\3\13\1\157\7\1\1\251"+
    "\10\1\1\13\1\140\3\13\2\67\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\45\2\13"+
    "\1\252\1\253\2\1\11\13\1\45\1\126\2\13\1\252\1\13\1\46\2\13\1\26\3\13\1\160"+
    "\11\1\23\13\1\213\1\13\1\63\1\26\11\1\1\254\2\13\1\255\1\13\1\63\1\13\1\213"+
    "\1\13\1\125\4\1\1\13\1\256\1\13\1\63\1\13\1\164\4\1\3\13\1\257\4\1\1\260\1"+
    "\261\1\13\1\262\2\1\1\13\1\140\1\13\1\140\2\1\1\137\1\13\1\213\1\1\3\13\1"+
    "\63\1\13\1\63\1\13\1\32\1\13\1\16\6\1\4\13\1\155\3\1\3\13\1\32\3\13\1\32\60"+
    "\1\4\13\1\213\1\1\1\62\1\200\3\13\1\31\1\1\1\13\1\155\1\126\3\13\1\263\1\1"+
    "\2\13\1\264\4\13\1\265\1\266\2\1\1\13\1\22\1\13\1\267\4\1\1\270\1\27\1\155"+
    "\3\13\1\31\1\126\1\37\1\52\1\40\1\65\1\72\1\271\1\272\1\157\10\1\4\13\1\31"+
    "\1\126\2\1\4\13\1\273\1\126\12\1\3\13\1\274\1\67\1\275\2\1\4\13\1\276\1\126"+
    "\2\1\3\13\1\26\1\126\3\1\1\13\1\105\1\46\1\126\26\1\4\13\1\126\1\200\34\1"+
    "\3\13\1\155\20\1\1\40\2\13\1\14\1\67\1\126\1\1\1\224\1\13\1\224\1\137\1\213"+
    "\64\1\71\13\1\164\6\1\6\13\1\125\1\1\14\13\1\160\53\1\2\13\1\125\75\1\44\13"+
    "\1\213\33\1\43\13\1\155\1\13\1\125\1\126\6\1\1\13\1\45\1\157\3\13\1\213\1"+
    "\160\1\126\1\241\1\277\1\13\67\1\4\13\1\157\2\13\1\125\1\200\1\13\4\1\1\67"+
    "\1\1\76\13\1\140\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\140\1\155\1\300"+
    "\114\1\1\301\1\302\1\303\1\1\1\304\11\1\1\305\33\1\5\13\1\141\3\13\1\156\1"+
    "\306\1\307\1\310\3\13\1\311\1\312\1\13\1\313\1\314\1\104\24\13\1\274\1\13"+
    "\1\104\1\145\1\13\1\145\1\13\1\141\1\13\1\141\1\125\1\13\1\125\1\13\1\40\1"+
    "\13\1\40\1\13\1\315\3\316\40\1\3\13\1\235\2\13\1\140\1\317\1\201\1\166\1\24"+
    "\25\1\1\14\1\225\1\320\75\1\14\13\1\157\1\213\2\1\4\13\1\31\1\126\112\1\1"+
    "\310\1\13\1\321\1\322\1\323\1\324\1\325\1\326\1\327\1\46\1\330\1\46\47\1\1"+
    "\13\1\164\1\13\1\164\1\13\1\164\47\1\55\13\1\213\2\1\103\13\1\157\15\13\1"+
    "\45\150\13\1\16\25\1\41\13\1\45\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\47\1\41\1\117\1\50\1\15\22\0\1\36\1\37\1\31\1\14\1\0\1\106\1\107\1"+
    "\27\1\42\1\43\1\103\1\102\1\115\1\23\1\21\1\105\1\6\1\5\6\3\2\4\1\46\1\51"+
    "\1\113\1\40\1\112\1\0\1\104\1\17\1\12\1\26\1\17\1\22\1\32\3\16\1\24\1\16\1"+
    "\13\1\16\1\35\1\11\2\16\1\25\2\16\1\25\2\16\1\7\2\16\1\44\1\30\1\45\1\111"+
    "\1\10\1\116\1\17\1\12\1\26\1\17\1\22\1\32\3\16\1\24\1\16\1\13\2\16\1\11\2"+
    "\16\1\25\2\16\1\25\2\16\1\7\2\16\1\33\1\110\1\34\1\114\6\0\1\117\24\0\1\16"+
    "\12\0\1\16\4\0\1\16\5\0\27\16\1\0\12\16\4\0\14\16\16\0\5\16\7\0\1\16\1\0\1"+
    "\16\1\0\5\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16\1\0\3\16\1\0\1\16\1\0\4\16"+
    "\1\0\23\16\1\0\11\16\1\0\26\16\2\0\1\16\6\0\10\16\10\0\16\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\1\16\10\0\13\16\5\0\3\16\15\0\2\16\1\74\1\53\1\16\1\76"+
    "\1\16\1\56\1\101\1\70\1\64\1\16\1\100\1\71\1\75\1\55\1\72\1\60\1\16\1\57\1"+
    "\16\1\61\2\16\1\66\1\77\7\16\1\63\1\16\1\54\1\73\1\65\1\62\1\16\1\52\1\16"+
    "\1\67\5\16\1\1\11\2\4\0\6\16\1\0\10\16\2\0\12\16\1\0\6\16\12\20\3\16\2\0\14"+
    "\16\2\0\3\16\12\20\14\16\4\0\1\16\5\0\16\16\2\0\14\16\4\0\5\16\1\0\10\16\6"+
    "\0\20\16\2\0\12\20\1\16\2\0\16\16\1\0\1\16\3\0\4\16\2\0\11\16\2\0\2\16\2\0"+
    "\4\16\10\0\1\16\4\0\2\16\1\0\1\16\1\0\3\16\1\0\6\16\4\0\2\16\1\0\2\16\1\0"+
    "\2\16\1\0\2\16\2\0\1\16\1\0\5\16\4\0\2\16\2\0\3\16\3\0\1\16\7\0\4\16\1\0\1"+
    "\16\7\0\12\20\6\16\13\0\3\16\1\0\11\16\1\0\2\16\1\0\2\16\1\0\5\16\2\0\12\16"+
    "\1\0\3\16\1\0\3\16\2\0\1\16\30\0\1\16\7\0\3\16\1\0\10\16\2\0\6\16\2\0\2\16"+
    "\2\0\3\16\10\0\2\16\4\0\2\16\1\0\1\16\1\0\1\16\20\0\2\16\1\0\6\16\3\0\3\16"+
    "\1\0\4\16\3\0\2\16\1\0\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\4\0\5\16"+
    "\3\0\3\16\1\0\4\16\2\0\1\16\6\0\1\16\10\0\4\16\1\0\10\16\1\0\3\16\1\0\30\16"+
    "\3\0\10\16\1\0\3\16\1\0\4\16\7\0\2\16\1\0\3\16\5\0\4\16\1\0\5\16\2\0\4\16"+
    "\5\0\2\16\7\0\1\16\2\0\2\16\16\0\3\16\1\0\10\16\1\0\7\16\1\0\3\16\1\0\5\16"+
    "\5\0\4\16\7\0\1\16\12\0\6\16\2\0\2\16\1\0\22\16\3\0\10\16\1\0\11\16\1\0\1"+
    "\16\2\0\7\16\3\0\1\16\4\0\6\16\1\0\1\16\1\0\10\16\2\0\2\16\14\0\17\16\1\0"+
    "\12\20\7\0\2\16\1\0\1\16\2\0\2\16\1\0\1\16\2\0\1\16\6\0\4\16\1\0\7\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\2\0\2\16\1\0\15\16\1\0\3\16\2\0\5\16\1\0\1\16\1\0"+
    "\6\16\2\0\12\20\2\0\4\16\10\0\2\16\13\0\1\16\1\0\1\16\1\0\1\16\4\0\12\16\1"+
    "\0\24\16\3\0\5\16\1\0\12\16\6\0\1\16\11\0\12\20\4\16\2\0\6\16\1\0\1\16\5\0"+
    "\1\16\2\0\13\16\1\0\15\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\1\16\1\0"+
    "\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\16\16\2\0\6\16\2\0\15\16\2\0\14\16\3"+
    "\0\13\16\7\0\15\16\1\0\7\16\13\0\4\16\14\0\1\16\1\0\2\16\14\0\4\16\3\0\1\16"+
    "\4\0\2\16\15\0\3\16\2\0\12\16\15\0\1\16\23\0\5\16\12\20\3\0\6\16\1\0\23\16"+
    "\1\0\2\16\6\0\6\16\5\0\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\6\16\1\0\7\16"+
    "\1\0\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16\14\0\2\117\25\0\1\16\4\0\1\16"+
    "\14\0\1\16\15\0\1\16\2\0\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0\5\16\6\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0\1\16\7\0\17\16"+
    "\6\0\15\16\7\0\10\16\11\0\7\16\1\0\7\16\6\0\3\16\11\0\5\16\2\0\5\16\3\0\7"+
    "\16\2\0\2\16\2\0\3\16\5\0\13\16\12\20\2\16\4\0\3\16\1\0\12\16\1\0\1\16\7\0"+
    "\11\16\2\0\27\16\2\0\15\16\3\0\1\16\1\0\1\16\2\0\1\16\16\0\1\16\12\20\5\16"+
    "\3\0\5\16\12\0\6\16\2\0\6\16\2\0\6\16\11\0\13\16\1\0\2\16\2\0\7\16\4\0\5\16"+
    "\3\0\5\16\5\0\12\16\1\0\5\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\12\16\3\0\15\16"+
    "\3\0\2\16\30\0\16\16\4\0\1\16\2\0\6\16\2\0\6\16\2\0\6\16\2\0\3\16\3\0\14\16"+
    "\1\0\16\16\1\0\2\16\1\0\1\16\15\0\1\16\2\0\4\16\4\0\10\16\1\0\5\16\12\0\6"+
    "\16\2\0\1\16\1\0\14\16\1\0\2\16\3\0\1\16\2\0\4\16\1\0\2\16\12\0\10\16\6\0"+
    "\6\16\1\0\2\16\5\0\10\16\1\0\3\16\1\0\13\16\4\0\3\16\4\0\6\16\1\0\12\20\4"+
    "\16\2\0\1\16\11\0\5\16\5\0\3\16\3\0\12\20\1\16\1\0\1\16\3\0\10\16\6\0\1\16"+
    "\1\0\7\16\1\0\1\16\1\0\4\16\1\0\2\16\6\0\1\16\5\0\7\16\2\0\7\16\3\0\6\16\1"+
    "\0\1\16\10\0\6\16\2\0\10\16\10\0\6\16\2\0\1\16\3\0\1\16\13\0\10\16\5\0\15"+
    "\16\3\0\2\16\6\0\5\16\3\0\6\16\10\0\10\16\2\0\7\16\16\0\4\16\4\0\3\16\15\0"+
    "\1\16\2\0\2\16\2\0\4\16\1\0\14\16\1\0\1\16\1\0\7\16\1\0\21\16\1\0\4\16\2\0"+
    "\10\16\1\0\7\16\1\0\14\16\1\0\4\16\1\0\5\16\1\0\1\16\3\0\11\16\1\0\10\16\2"+
    "\0\22\20\5\0\1\16\12\0\2\16\1\0\2\16\1\0\5\16\6\0\2\16\1\0\1\16\2\0\1\16\1"+
    "\0\12\16\1\0\4\16\1\0\1\16\1\0\1\16\6\0\1\16\4\0\1\16\1\0\1\16\1\0\1\16\1"+
    "\0\3\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\2\16\1\0\1\16\2\0\4\16\1\0\7\16\1\0\4\16\1\0\4\16\1\0\1\16\1\0\12\16\1\0"+
    "\5\16\1\0\3\16\1\0\5\16\1\0\5\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\3\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\15\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\44\1\45\2\46\1\47\1\3\2\50\1\22\1\51"+
    "\1\52\1\51\1\52\1\53\1\54\1\3\2\55\1\3"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\2\51\1\53\1\67\2\0\1\70\1\0\1\71"+
    "\1\0\2\2\4\0\1\3\1\70\1\72\1\73\3\7"+
    "\1\74\3\7\1\3\2\75\1\76\1\77\2\3\1\100"+
    "\7\3\1\101\1\3\1\102\4\3\1\103\1\3\1\104"+
    "\5\3\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\3\46\1\124\3\46\1\3\6\50\2\0\1\125"+
    "\2\0\1\52\1\51\1\52\1\3\6\55\1\3\2\126"+
    "\1\60\1\0\1\51\1\70\1\0\1\2\1\0\1\2"+
    "\1\0\1\3\1\0\1\7\1\127\1\130\1\0\1\127"+
    "\1\3\2\0\1\3\1\131\1\132\4\3\1\133\1\134"+
    "\1\135\3\3\1\136\1\137\1\140\1\3\1\141\2\3"+
    "\1\142\1\143\1\144\1\145\1\0\1\46\1\146\1\147"+
    "\1\0\1\146\1\3\1\50\2\150\1\52\1\3\1\55"+
    "\2\151\1\3\2\0\1\51\1\0\2\152\1\0\1\3"+
    "\1\75\2\3\1\153\2\3\1\154\2\3\1\155\1\156"+
    "\2\3\1\0\2\147\11\0\1\3\1\126\4\0\1\157"+
    "\1\160\1\161\1\3\1\162\1\163\1\164\1\165\10\0"+
    "\1\127\1\3\1\146\1\150\1\151\1\152\1\0\1\166"+
    "\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u01e0\0\u0500\0\u0550\0\u01e0\0\u01e0\0\u01e0\0\u05a0\0\u05f0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820"+
    "\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0"+
    "\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20"+
    "\0\u0d70\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0dc0\0\u0e10\0\u0e60"+
    "\0\u0eb0\0\u01e0\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090"+
    "\0\u10e0\0\u1130\0\u1180\0\u01e0\0\u11d0\0\u1220\0\u1270\0\u12c0"+
    "\0\u01e0\0\u01e0\0\u1310\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u1360\0\u13b0\0\u01e0\0\u01e0\0\u0230\0\u1400\0\u1450"+
    "\0\u14a0\0\u01e0\0\u14f0\0\u01e0\0\u1540\0\u1590\0\u15e0\0\u1630"+
    "\0\u1680\0\u16d0\0\u1720\0\u01e0\0\u01e0\0\u1770\0\u17c0\0\u1810"+
    "\0\u01e0\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u01e0"+
    "\0\u01e0\0\u1a40\0\u1a90\0\u0320\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0"+
    "\0\u1c20\0\u1c70\0\u1cc0\0\u0320\0\u1d10\0\u0320\0\u1d60\0\u1db0"+
    "\0\u1e00\0\u1e50\0\u0320\0\u1ea0\0\u0320\0\u1ef0\0\u1f40\0\u1f90"+
    "\0\u1fe0\0\u2030\0\u01e0\0\u01e0\0\u2080\0\u01e0\0\u01e0\0\u20d0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u2120\0\u01e0\0\u01e0"+
    "\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u01e0\0\u2300\0\u2350"+
    "\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u25d0"+
    "\0\u2620\0\u0ff0\0\u01e0\0\u10e0\0\u1180\0\u2670\0\u26c0\0\u2710"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990"+
    "\0\u29e0\0\u2a30\0\u2a80\0\u13b0\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0"+
    "\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u0410\0\u2d50\0\u2da0\0\u01e0"+
    "\0\u2d50\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u0320\0\u0320"+
    "\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u0320\0\u0320\0\u0320\0\u30c0"+
    "\0\u3110\0\u3160\0\u0320\0\u0320\0\u0320\0\u31b0\0\u0320\0\u3200"+
    "\0\u3250\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u32a0\0\u32f0\0\u3340"+
    "\0\u01e0\0\u32f0\0\u3390\0\u33e0\0\u01e0\0\u3430\0\u3480\0\u01e0"+
    "\0\u34d0\0\u01e0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0"+
    "\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u01e0\0\u3890\0\u38e0"+
    "\0\u0320\0\u3930\0\u3980\0\u0320\0\u39d0\0\u3a20\0\u0320\0\u0320"+
    "\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u01e0"+
    "\0\u3f20\0\u3750\0\u37a0\0\u3f70\0\u0320\0\u0320\0\u0320\0\u3fc0"+
    "\0\u0320\0\u0320\0\u0320\0\u0320\0\u4010\0\u3b60\0\u3bb0\0\u4060"+
    "\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u32f0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u41f0\0\u01e0\0\u0320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\3\7\1\12\3\13\1\14\1\13"+
    "\1\15\1\7\2\13\1\7\1\16\1\13\1\17\1\13"+
    "\2\14\1\20\1\21\1\22\1\23\1\24\1\25\1\13"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\13\1\44"+
    "\1\13\1\45\1\46\1\13\1\47\1\13\1\50\1\13"+
    "\1\51\1\13\1\52\1\13\1\53\1\54\1\13\1\55"+
    "\1\56\1\13\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\7\12\75\1\76\1\75\1\77\1\0\7\75\2\76"+
    "\1\100\1\21\1\101\4\75\1\26\2\75\1\102\5\75"+
    "\1\37\1\40\46\75\1\0\1\7\1\10\1\11\3\7"+
    "\1\12\3\13\1\103\1\13\1\77\1\7\2\13\1\7"+
    "\1\16\1\13\1\17\1\13\2\103\1\104\1\21\1\105"+
    "\1\23\1\24\1\25\1\13\1\26\1\27\1\30\1\102"+
    "\1\32\1\33\1\34\1\35\1\106\1\37\1\40\1\41"+
    "\1\42\1\43\2\13\1\44\1\13\1\45\1\46\1\13"+
    "\1\47\1\13\1\50\1\13\1\51\1\13\1\52\1\13"+
    "\1\53\1\54\1\13\1\55\1\56\1\13\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\7\15\107\1\7\11\107"+
    "\1\110\1\111\1\112\1\107\1\113\5\107\1\114\56\107"+
    "\1\7\1\10\1\11\3\7\1\12\3\13\1\115\1\13"+
    "\1\77\1\7\2\13\1\7\1\16\1\13\1\17\1\13"+
    "\2\115\1\116\1\21\1\117\1\120\1\121\1\122\1\13"+
    "\1\26\1\123\1\30\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\37\1\40\1\41\1\42\1\43\2\13\1\44"+
    "\1\13\1\45\1\46\1\13\1\47\1\13\1\50\1\13"+
    "\1\51\1\13\1\52\1\13\1\53\1\54\1\13\1\55"+
    "\1\56\1\13\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\7\15\132\1\7\11\132\1\110\1\133\1\112\1\132"+
    "\1\134\1\135\4\132\1\114\56\132\121\0\2\136\5\0"+
    "\1\137\10\0\1\140\1\141\1\0\1\142\74\0\2\11"+
    "\5\0\1\143\2\0\1\144\5\0\1\140\1\141\1\0"+
    "\1\142\76\0\1\145\1\0\2\145\1\146\1\147\1\150"+
    "\1\151\1\144\105\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\30\13"+
    "\17\0\11\13\1\152\1\13\2\0\3\13\1\0\1\13"+
    "\1\0\1\13\2\152\1\20\1\0\1\22\1\23\2\0"+
    "\1\13\14\0\30\13\16\0\15\15\1\0\23\15\1\0"+
    "\56\15\1\0\2\153\155\0\1\154\51\0\1\155\5\0"+
    "\15\156\1\0\11\156\1\157\1\160\10\156\1\161\56\156"+
    "\15\162\1\0\12\162\1\163\1\164\7\162\1\161\56\162"+
    "\1\0\11\13\1\165\1\13\2\0\3\13\1\0\1\13"+
    "\1\0\1\13\2\165\1\166\1\0\1\167\1\13\2\0"+
    "\1\13\14\0\30\13\56\0\1\170\117\0\1\171\60\0"+
    "\13\13\2\0\3\13\1\0\1\13\1\0\3\13\3\0"+
    "\1\13\2\0\1\13\14\0\14\13\1\172\4\13\1\173"+
    "\6\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\1\174\1\13"+
    "\1\175\20\13\1\176\4\13\17\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\3\0\1\13\2\0\1\13"+
    "\14\0\2\13\1\177\2\13\1\200\5\13\1\201\14\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\11\13\1\202\16\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\10\13\1\203\17\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\15\13\1\204\12\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\6\13\1\205\1\13"+
    "\1\206\6\13\1\207\10\13\17\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\3\0\1\13\2\0\1\13"+
    "\14\0\5\13\1\210\22\13\17\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\3\0\1\13\2\0\1\13"+
    "\14\0\4\13\1\211\13\13\1\212\7\13\17\0\13\13"+
    "\2\0\3\13\1\0\1\13\1\0\3\13\3\0\1\13"+
    "\2\0\1\13\14\0\1\213\1\214\2\13\1\215\23\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\23\13\1\216\4\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\6\13\1\217\12\13"+
    "\1\220\6\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\4\13"+
    "\1\221\23\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\15\13"+
    "\1\222\12\13\56\0\1\223\117\0\1\224\42\0\1\225"+
    "\54\0\1\226\117\0\1\227\44\0\1\230\52\0\1\231"+
    "\117\0\1\232\117\0\1\233\117\0\1\234\117\0\1\235"+
    "\51\0\1\236\45\0\1\237\51\0\1\240\1\241\16\0"+
    "\1\242\12\0\2\242\1\100\1\0\1\101\66\0\15\77"+
    "\1\0\23\77\1\0\56\77\15\243\1\0\11\243\1\244"+
    "\1\245\10\243\1\246\56\243\15\247\1\0\12\247\1\250"+
    "\1\251\7\247\1\246\56\247\1\0\11\13\1\252\1\13"+
    "\2\0\3\13\1\0\1\13\1\0\1\13\2\252\1\104"+
    "\1\0\1\105\1\23\2\0\1\13\14\0\30\13\16\0"+
    "\15\253\1\0\11\253\1\254\1\255\10\253\1\0\56\253"+
    "\15\256\1\0\12\256\1\257\1\260\7\256\1\0\56\256"+
    "\14\0\1\261\21\0\1\262\2\0\1\263\56\0\15\107"+
    "\1\0\11\107\1\0\1\264\1\0\1\107\1\265\5\107"+
    "\1\0\56\107\27\0\1\266\70\0\33\107\2\0\1\267"+
    "\62\107\31\0\1\270\121\0\1\107\65\0\11\13\1\271"+
    "\1\13\2\0\3\13\1\0\1\13\1\0\1\13\2\271"+
    "\1\116\1\0\1\117\1\120\2\0\1\13\14\0\30\13"+
    "\16\0\15\272\1\0\11\272\1\273\1\274\10\272\1\0"+
    "\56\272\15\275\1\0\12\275\1\276\1\277\7\275\1\0"+
    "\56\275\1\0\11\13\1\300\1\13\2\0\3\13\1\0"+
    "\1\13\1\0\1\13\2\300\1\301\1\0\1\302\1\13"+
    "\2\0\1\13\14\0\30\13\16\0\15\303\1\0\11\303"+
    "\1\0\1\303\1\0\2\303\1\0\1\303\1\0\1\303"+
    "\1\170\1\0\4\303\2\0\50\303\15\132\1\0\11\132"+
    "\1\0\1\304\1\0\1\132\2\0\4\132\1\0\111\132"+
    "\2\0\1\305\62\132\1\0\2\136\116\0\2\153\17\0"+
    "\1\141\1\0\1\142\74\0\2\306\20\0\1\307\56\0"+
    "\1\307\16\0\2\11\120\0\1\145\1\0\2\145\1\0"+
    "\1\147\2\0\1\144\107\0\4\310\1\0\1\311\1\0"+
    "\1\310\4\0\1\310\2\0\1\310\3\0\1\310\3\0"+
    "\1\310\70\0\1\145\1\0\2\145\114\0\1\145\1\0"+
    "\2\145\1\0\1\147\114\0\2\312\1\0\1\313\110\0"+
    "\11\13\1\314\1\13\2\0\3\13\1\0\1\13\1\0"+
    "\1\13\2\314\1\20\1\0\1\22\1\23\2\0\1\13"+
    "\14\0\30\13\17\0\2\153\5\0\1\315\11\0\1\141"+
    "\1\0\1\142\73\0\15\156\1\0\11\156\1\316\1\160"+
    "\10\156\1\161\56\156\27\0\1\317\1\320\5\0\1\321"+
    "\2\0\1\161\5\0\1\321\1\0\1\161\46\0\120\156"+
    "\15\162\1\0\12\162\1\163\1\316\7\162\1\161\176\162"+
    "\30\0\1\320\1\322\4\0\1\321\2\0\1\161\5\0"+
    "\1\321\1\0\1\161\47\0\11\13\1\323\1\13\2\0"+
    "\3\13\1\0\1\13\1\0\1\13\2\323\1\166\1\0"+
    "\1\167\1\13\2\0\1\13\14\0\30\13\45\0\1\324"+
    "\121\0\1\325\67\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\15\13"+
    "\1\326\12\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\1\327"+
    "\27\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\3\13\1\330"+
    "\24\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\15\13\1\331"+
    "\12\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\5\13\1\332"+
    "\22\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\12\13\1\333"+
    "\15\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\3\13\1\334"+
    "\24\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\25\13\1\335"+
    "\2\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\11\13\1\336"+
    "\16\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\6\13\1\337"+
    "\21\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\7\13\1\340"+
    "\20\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\4\13\1\341"+
    "\23\13\17\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\3\0\1\13\2\0\1\13\14\0\1\342\27\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\11\13\1\343\16\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\10\13\1\344\17\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\6\13\1\345\21\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\26\13\1\346\1\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\4\13\1\347\23\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\21\13\1\350\6\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\10\13\1\351\17\13"+
    "\56\0\1\352\117\0\1\353\117\0\1\354\117\0\1\355"+
    "\71\0\1\356\12\0\2\356\1\100\1\0\1\101\66\0"+
    "\15\243\1\0\11\243\1\357\1\245\10\243\1\246\56\243"+
    "\27\0\1\360\1\361\5\0\1\362\2\0\1\246\5\0"+
    "\1\362\1\0\1\246\46\0\120\243\15\247\1\0\12\247"+
    "\1\250\1\357\7\247\1\246\176\247\30\0\1\361\1\363"+
    "\4\0\1\362\2\0\1\246\5\0\1\362\1\0\1\246"+
    "\47\0\11\13\1\364\1\13\2\0\3\13\1\0\1\13"+
    "\1\0\1\13\2\364\1\104\1\0\1\105\1\23\2\0"+
    "\1\13\14\0\30\13\16\0\15\253\1\0\11\253\1\365"+
    "\1\255\10\253\1\0\56\253\27\0\1\366\70\0\120\253"+
    "\15\256\1\0\12\256\1\257\1\365\7\256\1\0\176\256"+
    "\31\0\1\367\66\0\15\261\1\0\23\261\1\263\56\261"+
    "\27\0\1\370\70\0\15\107\1\0\11\107\1\0\1\264"+
    "\1\0\1\107\1\267\5\107\1\0\56\107\31\0\1\370"+
    "\67\0\11\13\1\371\1\13\2\0\3\13\1\0\1\13"+
    "\1\0\1\13\2\371\1\116\1\0\1\117\1\120\2\0"+
    "\1\13\14\0\30\13\16\0\15\272\1\0\11\272\1\372"+
    "\1\274\10\272\1\0\56\272\27\0\1\373\70\0\120\272"+
    "\15\275\1\0\12\275\1\276\1\372\7\275\1\0\176\275"+
    "\31\0\1\374\67\0\11\13\1\375\1\13\2\0\3\13"+
    "\1\0\1\13\1\0\1\13\2\375\1\301\1\0\1\302"+
    "\1\13\2\0\1\13\14\0\30\13\45\0\1\376\121\0"+
    "\1\377\66\0\15\303\1\0\11\303\1\0\1\303\1\0"+
    "\2\303\1\0\1\303\1\0\1\303\2\0\4\303\2\0"+
    "\50\303\15\132\1\0\11\132\1\0\1\304\1\0\1\132"+
    "\1\u0100\1\0\4\132\1\0\56\132\1\0\2\306\5\0"+
    "\1\307\13\0\1\142\74\0\2\306\120\0\4\310\1\0"+
    "\1\311\1\0\1\310\1\144\3\0\1\310\2\0\1\310"+
    "\3\0\1\310\3\0\1\310\70\0\4\310\3\0\1\310"+
    "\4\0\1\310\2\0\1\310\3\0\1\310\3\0\1\310"+
    "\72\0\2\312\1\0\1\313\2\0\1\144\111\0\2\312"+
    "\112\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\1\20\1\0\1\22\1\23\2\0\1\13\14\0\30\13"+
    "\46\0\1\320\5\0\1\321\2\0\1\161\5\0\1\321"+
    "\1\0\1\161\46\0\27\317\1\u0101\1\u0102\67\317\30\322"+
    "\1\u0103\1\u0104\66\322\1\0\11\13\1\u0105\1\13\2\0"+
    "\3\13\1\0\1\13\1\0\1\13\2\u0105\1\166\1\0"+
    "\1\167\1\13\2\0\1\13\14\0\30\13\45\0\1\u0106"+
    "\121\0\1\u0106\67\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\11\13"+
    "\1\u0107\16\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\6\13"+
    "\1\u0108\21\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\6\13"+
    "\1\u0109\21\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\13\13"+
    "\1\u010a\1\13\1\u010b\12\13\17\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\3\0\1\13\2\0\1\13"+
    "\14\0\4\13\1\u010c\23\13\17\0\13\13\2\0\3\13"+
    "\1\0\1\13\1\0\3\13\3\0\1\13\2\0\1\13"+
    "\14\0\1\u010d\27\13\17\0\13\13\2\0\3\13\1\0"+
    "\1\13\1\0\3\13\3\0\1\13\2\0\1\13\14\0"+
    "\1\u010e\27\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\21\13"+
    "\1\u010f\6\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\25\13"+
    "\1\u0110\2\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\13\13"+
    "\1\u0111\14\13\17\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\13\13"+
    "\1\u0112\14\13\45\0\1\100\1\0\1\101\116\0\1\361"+
    "\5\0\1\362\2\0\1\246\5\0\1\362\1\0\1\246"+
    "\46\0\27\360\1\u0113\1\u0114\67\360\30\363\1\u0115\1\u0116"+
    "\66\363\1\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\1\104\1\0\1\105\1\23\2\0\1\13\14\0"+
    "\30\13\16\0\27\366\1\u0117\1\u0118\67\366\30\367\1\u0119"+
    "\1\u011a\66\367\1\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\1\116\1\0\1\117\1\120\2\0\1\13"+
    "\14\0\30\13\16\0\27\373\1\u011b\1\u011c\67\373\30\374"+
    "\1\u011d\1\u011e\66\374\1\0\11\13\1\u011f\1\13\2\0"+
    "\3\13\1\0\1\13\1\0\1\13\2\u011f\1\301\1\0"+
    "\1\302\1\13\2\0\1\13\14\0\30\13\45\0\1\u0120"+
    "\121\0\1\u0120\66\0\1\132\13\u0100\1\132\1\0\3\u0100"+
    "\1\132\1\u0100\1\132\3\u0100\1\0\1\304\1\0\1\u0100"+
    "\1\0\1\132\2\u0100\2\132\1\0\10\132\30\u0100\16\132"+
    "\27\317\1\u0121\1\u0122\207\317\150\322\1\u0123\1\u0124\66\322"+
    "\1\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\1\166\1\0\1\167\1\13\2\0\1\13\14\0\30\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\16\13\1\u0125\11\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\4\13\1\u0126\23\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\6\13\1\u0127\21\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\6\13\1\u0128\21\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\21\13\1\u0129\6\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\15\13\1\u012a\12\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\15\13\1\u012b\12\13"+
    "\17\0\13\13\2\0\3\13\1\0\1\13\1\0\3\13"+
    "\3\0\1\13\2\0\1\13\14\0\4\13\1\u012c\23\13"+
    "\16\0\27\360\1\u012d\1\u012e\207\360\150\363\1\u012f\1\u0130"+
    "\66\363\27\366\1\u0131\1\u0118\207\366\150\367\1\u0119\1\u0132"+
    "\66\367\27\373\1\u0133\1\u011c\207\373\150\374\1\u011d\1\u0134"+
    "\66\374\1\0\13\13\2\0\3\13\1\0\1\13\1\0"+
    "\3\13\1\301\1\0\1\302\1\13\2\0\1\13\14\0"+
    "\30\13\16\0\27\317\1\u0135\1\u0122\67\317\30\322\1\u0123"+
    "\1\u0135\66\322\1\0\13\13\2\0\3\13\1\0\1\13"+
    "\1\0\3\13\3\0\1\13\2\0\1\13\14\0\4\13"+
    "\1\u0136\23\13\16\0\27\360\1\u0137\1\u012e\67\360\30\363"+
    "\1\u012f\1\u0137\66\363\27\366\1\u0138\1\u0118\67\366\30\367"+
    "\1\u0119\1\u0138\66\367\27\373\1\u0139\1\u011c\67\373\30\374"+
    "\1\u011d\1\u0139\66\374\30\0\1\u013a\5\0\1\u013b\2\0"+
    "\1\u013c\5\0\1\u013b\1\0\1\u013c\47\0\13\13\2\0"+
    "\3\13\1\0\1\13\1\0\3\13\3\0\1\13\2\0"+
    "\1\13\14\0\3\13\1\u013d\24\13\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\11\1\1\11\2\1\3\11\2\1\11\11"+
    "\30\1\4\11\4\1\1\11\11\1\1\11\4\1\2\11"+
    "\1\1\6\11\2\1\2\11\2\0\1\1\1\0\1\11"+
    "\1\0\1\11\1\1\4\0\2\1\2\11\3\1\1\11"+
    "\6\1\2\11\31\1\2\11\1\1\2\11\1\1\5\11"+
    "\1\1\2\11\1\1\1\0\3\1\1\11\12\1\2\0"+
    "\1\11\2\0\16\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\0\2\1"+
    "\2\0\24\1\4\11\1\0\2\1\1\11\1\0\2\1"+
    "\1\11\2\1\1\11\1\1\1\11\3\1\2\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\14\1\1\0\2\1"+
    "\11\0\1\1\1\11\4\0\10\1\10\0\3\1\3\11"+
    "\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private final YaLangLexerFStringHelper fStringHelper = new YaLangLexerFStringHelper(this);

private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YaLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return YaLangTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 120: break;
          case 2: 
            { return YaLangTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 121: break;
          case 3: 
            { return YaLangTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 122: break;
          case 4: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 123: break;
          case 5: 
            { return YaLangTokenTypes.DOT;
            } 
            // fall through
          case 124: break;
          case 6: 
            { return YaLangTokenTypes.MINUS;
            } 
            // fall through
          case 125: break;
          case 7: 
            { if (zzInput == YYEOF && zzStartRead == 0) return YaLangTokenTypes.DOCSTRING;
                                 else return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 126: break;
          case 8: 
            { return YaLangTokenTypes.BACKSLASH;
            } 
            // fall through
          case 127: break;
          case 9: 
            { return YaLangTokenTypes.LBRACE;
            } 
            // fall through
          case 128: break;
          case 10: 
            { return YaLangTokenTypes.RBRACE;
            } 
            // fall through
          case 129: break;
          case 11: 
            { return YaLangTokenTypes.SPACE;
            } 
            // fall through
          case 130: break;
          case 12: 
            { return YaLangTokenTypes.EQ;
            } 
            // fall through
          case 131: break;
          case 13: 
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 132: break;
          case 14: 
            { return YaLangTokenTypes.LPAR;
            } 
            // fall through
          case 133: break;
          case 15: 
            { return YaLangTokenTypes.RPAR;
            } 
            // fall through
          case 134: break;
          case 16: 
            { return YaLangTokenTypes.LBRACKET;
            } 
            // fall through
          case 135: break;
          case 17: 
            { return YaLangTokenTypes.RBRACKET;
            } 
            // fall through
          case 136: break;
          case 18: 
            { return YaLangTokenTypes.COLON;
            } 
            // fall through
          case 137: break;
          case 19: 
            { return YaLangTokenTypes.TAB;
            } 
            // fall through
          case 138: break;
          case 20: 
            { return YaLangTokenTypes.FORMFEED;
            } 
            // fall through
          case 139: break;
          case 21: 
            { return YaLangTokenTypes.SEMICOLON;
            } 
            // fall through
          case 140: break;
          case 22: 
            { return YaLangTokenTypes.AND_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 23: 
            { return YaLangTokenTypes.PLUS;
            } 
            // fall through
          case 142: break;
          case 24: 
            { return YaLangTokenTypes.MULT;
            } 
            // fall through
          case 143: break;
          case 25: 
            { return YaLangTokenTypes.AT;
            } 
            // fall through
          case 144: break;
          case 26: 
            { return YaLangTokenTypes.DIV;
            } 
            // fall through
          case 145: break;
          case 27: 
            { return YaLangTokenTypes.PERC;
            } 
            // fall through
          case 146: break;
          case 28: 
            { return YaLangTokenTypes.AND;
            } 
            // fall through
          case 147: break;
          case 29: 
            { return YaLangTokenTypes.OR;
            } 
            // fall through
          case 148: break;
          case 30: 
            { return YaLangTokenTypes.XOR;
            } 
            // fall through
          case 149: break;
          case 31: 
            { return YaLangTokenTypes.GT;
            } 
            // fall through
          case 150: break;
          case 32: 
            { return YaLangTokenTypes.LT;
            } 
            // fall through
          case 151: break;
          case 33: 
            { return YaLangTokenTypes.TILDE;
            } 
            // fall through
          case 152: break;
          case 34: 
            { return YaLangTokenTypes.COMMA;
            } 
            // fall through
          case 153: break;
          case 35: 
            { return YaLangTokenTypes.TICK;
            } 
            // fall through
          case 154: break;
          case 36: 
            { yypushback(1); yybegin(YYINITIAL);
            } 
            // fall through
          case 155: break;
          case 37: 
            { return YaLangTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 156: break;
          case 38: 
            { if (zzInput == YYEOF) return YaLangTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 157: break;
          case 39: 
            { return YaLangTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 158: break;
          case 40: 
            { return YaLangTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 159: break;
          case 41: 
            { return YaLangTokenTypes.FSTRING_TEXT;
            } 
            // fall through
          case 160: break;
          case 42: 
            { return fStringHelper.handleFStringEnd();
            } 
            // fall through
          case 161: break;
          case 43: 
            { return fStringHelper.handleFragmentStart();
            } 
            // fall through
          case 162: break;
          case 44: 
            { return fStringHelper.handleLineBreakInLiteralText();
            } 
            // fall through
          case 163: break;
          case 45: 
            { return fStringHelper.handleStringLiteral(YaLangTokenTypes.SINGLE_QUOTED_STRING);
            } 
            // fall through
          case 164: break;
          case 46: 
            { return fStringHelper.handleLeftBracketInFragment(YaLangTokenTypes.LBRACE);
            } 
            // fall through
          case 165: break;
          case 47: 
            { return fStringHelper.handleRightBracketInFragment(YaLangTokenTypes.RBRACE);
            } 
            // fall through
          case 166: break;
          case 48: 
            { return YaLangTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            } 
            // fall through
          case 167: break;
          case 49: 
            { return fStringHelper.handleLineBreakInFragment();
            } 
            // fall through
          case 168: break;
          case 50: 
            { return fStringHelper.handleLeftBracketInFragment(YaLangTokenTypes.LPAR);
            } 
            // fall through
          case 169: break;
          case 51: 
            { return fStringHelper.handleRightBracketInFragment(YaLangTokenTypes.RPAR);
            } 
            // fall through
          case 170: break;
          case 52: 
            { return fStringHelper.handleLeftBracketInFragment(YaLangTokenTypes.LBRACKET);
            } 
            // fall through
          case 171: break;
          case 53: 
            { return fStringHelper.handleRightBracketInFragment(YaLangTokenTypes.RBRACKET);
            } 
            // fall through
          case 172: break;
          case 54: 
            { return fStringHelper.handleColonInFragment();
            } 
            // fall through
          case 173: break;
          case 55: 
            { return fStringHelper.handleFragmentEnd();
            } 
            // fall through
          case 174: break;
          case 56: 
            { return YaLangTokenTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 175: break;
          case 57: 
            { return YaLangTokenTypes.IMAGINARY_LITERAL;
            } 
            // fall through
          case 176: break;
          case 58: 
            { return YaLangTokenTypes.MINUSEQ;
            } 
            // fall through
          case 177: break;
          case 59: 
            { return YaLangTokenTypes.RARROW;
            } 
            // fall through
          case 178: break;
          case 60: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.SINGLE_QUOTED_STRING;
return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 179: break;
          case 61: 
            { return fStringHelper.handleFStringStart();
            } 
            // fall through
          case 180: break;
          case 62: 
            { return YaLangTokenTypes.NE;
            } 
            // fall through
          case 181: break;
          case 63: 
            { return YaLangTokenTypes.EQEQ;
            } 
            // fall through
          case 182: break;
          case 64: 
            { return YaLangTokenTypes.OR_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 65: 
            { return YaLangTokenTypes.IN_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 66: 
            { return YaLangTokenTypes.FROM_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 67: 
            { return YaLangTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 68: 
            { return YaLangTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 69: 
            { return YaLangTokenTypes.PLUSEQ;
            } 
            // fall through
          case 188: break;
          case 70: 
            { return YaLangTokenTypes.MULTEQ;
            } 
            // fall through
          case 189: break;
          case 71: 
            { return YaLangTokenTypes.EXP;
            } 
            // fall through
          case 190: break;
          case 72: 
            { return YaLangTokenTypes.ATEQ;
            } 
            // fall through
          case 191: break;
          case 73: 
            { return YaLangTokenTypes.DIVEQ;
            } 
            // fall through
          case 192: break;
          case 74: 
            { return YaLangTokenTypes.FLOORDIV;
            } 
            // fall through
          case 193: break;
          case 75: 
            { return YaLangTokenTypes.PERCEQ;
            } 
            // fall through
          case 194: break;
          case 76: 
            { return YaLangTokenTypes.ANDEQ;
            } 
            // fall through
          case 195: break;
          case 77: 
            { return YaLangTokenTypes.OREQ;
            } 
            // fall through
          case 196: break;
          case 78: 
            { return YaLangTokenTypes.XOREQ;
            } 
            // fall through
          case 197: break;
          case 79: 
            { return YaLangTokenTypes.GE;
            } 
            // fall through
          case 198: break;
          case 80: 
            { return YaLangTokenTypes.GTGT;
            } 
            // fall through
          case 199: break;
          case 81: 
            { return YaLangTokenTypes.LE;
            } 
            // fall through
          case 200: break;
          case 82: 
            { return YaLangTokenTypes.NE_OLD;
            } 
            // fall through
          case 201: break;
          case 83: 
            { return YaLangTokenTypes.LTLT;
            } 
            // fall through
          case 202: break;
          case 84: 
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 203: break;
          case 85: 
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.COLON;
            } 
            // fall through
          case 204: break;
          case 86: 
            { return fStringHelper.handleFStringStartInFragment();
            } 
            // fall through
          case 205: break;
          case 87: 
            { if (zzInput == YYEOF && zzStartRead == 0) return YaLangTokenTypes.DOCSTRING;
                                 else return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 206: break;
          case 88: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 207: break;
          case 89: 
            { return YaLangTokenTypes.ELIF_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 90: 
            { return YaLangTokenTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 91: 
            { return YaLangTokenTypes.RAISE_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 92: 
            { yybegin(IN_DOCSTRING_OWNER); return YaLangTokenTypes.CLASS_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 93: 
            { return YaLangTokenTypes.PASS_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 94: 
            { return YaLangTokenTypes.DEL_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 95: 
            { return YaLangTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 96: 
            { return YaLangTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 97: 
            { return YaLangTokenTypes.EXCEPT_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 98: 
            { return YaLangTokenTypes.EXPEQ;
            } 
            // fall through
          case 217: break;
          case 99: 
            { return YaLangTokenTypes.FLOORDIVEQ;
            } 
            // fall through
          case 218: break;
          case 100: 
            { return YaLangTokenTypes.GTGTEQ;
            } 
            // fall through
          case 219: break;
          case 101: 
            { return YaLangTokenTypes.LTLTEQ;
            } 
            // fall through
          case 220: break;
          case 102: 
            { if (zzInput == YYEOF) return YaLangTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 221: break;
          case 103: 
            { yypushback(getSpaceLength(yytext())); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 222: break;
          case 104: 
            { return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 223: break;
          case 105: 
            { return fStringHelper.handleStringLiteral(YaLangTokenTypes.TRIPLE_QUOTED_STRING);
            } 
            // fall through
          case 224: break;
          case 106: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 225: break;
          case 107: 
            { return YaLangTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 108: 
            { return YaLangTokenTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 109: 
            { return YaLangTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 110: 
            { return YaLangTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 111: 
            { yybegin(IN_DOCSTRING_OWNER); return YaLangTokenTypes.DEF_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 112: 
            { return YaLangTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 113: 
            { return YaLangTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 232: break;
          case 114: 
            { return YaLangTokenTypes.YIELD_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 115: 
            { return YaLangTokenTypes.IS_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 116: 
            { return YaLangTokenTypes.GLOBAL_KEYWORD;
            } 
            // fall through
          case 235: break;
          case 117: 
            { return YaLangTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 236: break;
          case 118: 
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return YaLangTokenTypes.TRIPLE_QUOTED_STRING;
return YaLangTokenTypes.DOCSTRING;
            } 
            // fall through
          case 237: break;
          case 119: 
            { return YaLangTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
